name: Build → Push → Deploy (ECR → EC2 via SSH)

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      entry_command:
        description: "Container command (override if needed)"
        required: false
        default: "python src/global_monitor.py"

concurrency:
  group: healthcheck-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 900335273390
  ECR_REPOSITORY: qa-an2p-health-check-ecr

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: opsnow-healthcheck
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      image_uri: ${{ steps.meta.outputs.image_uri }}
      image_name: ${{ steps.meta.outputs.image_name }}
      image_digest: ${{ steps.push.outputs.image_digest }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GithubDeployRole
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image metadata
        id: meta
        run: |
          set -eu
          IMAGE_TAG="${GITHUB_SHA}"
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          IMAGE_NAME="${REGISTRY}/${ECR_REPOSITORY}"
          IMAGE_URI="${IMAGE_NAME}:${IMAGE_TAG}"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "image_uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "Using IMAGE_URI=$IMAGE_URI"
          echo "Using IMAGE_NAME=$IMAGE_NAME"

      - name: Build and push Docker image
        id: push
        run: |
          set -euo pipefail
          docker build -f cicd/docker/Dockerfile -t "${{ steps.meta.outputs.image_uri }}" .
          docker push "${{ steps.meta.outputs.image_uri }}"

          DIGEST=$(aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --image-ids imageTag="${{ steps.meta.outputs.image_tag }}" \
            --query 'imageDetails[0].imageDigest' --output text)
          if [ -z "$DIGEST" ] || [ "$DIGEST" = "None" ]; then
            echo "Failed to resolve image digest after push"; exit 1
          fi
          echo "image_digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Pushed image digest: $DIGEST"

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: opsnow-healthcheck
    permissions:
      contents: read
    env:
      IMAGE_NAME: ${{ needs.build_and_push.outputs.image_name }}   # registry/repo (no tag)
      IMAGE_DIGEST: ${{ needs.build_and_push.outputs.image_digest }}
      # Use github.event.inputs so workflow_dispatch inputs work, and push events fall back to default
      ENTRY_CMD: ${{ github.event.inputs.entry_command || 'python global_monitor.py' }}
      # Hard-code these here to avoid parser ambiguity:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 900335273390

    steps:
      - name: Assert required secrets exist
        run: |
          [ -n "${{ secrets.EC2_HOST }}" ] || { echo "❌ Missing EC2_HOST secret"; exit 1; }
          [ -n "${{ secrets.EC2_SSH_KEY }}" ] || { echo "❌ Missing EC2_SSH_KEY secret"; exit 1; }

      - name: Deploy to EC2 via SSH (with aws-cli install if missing)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: IMAGE_NAME,IMAGE_DIGEST,ENTRY_CMD,AWS_REGION,AWS_ACCOUNT_ID
          script: |
            set -euxo pipefail
            echo "🚀 Starting deployment on $(hostname) at $(date)"

            # Ensure docker running
            sudo systemctl start docker || true
            sudo docker info | sed -n '1,40p' || true

            # Ensure aws CLI exists; install if missing
            if ! command -v aws >/dev/null 2>&1; then
              echo "▶ aws CLI not found — installing AWS CLI v2"
              sudo apt-get update -y
              sudo apt-get install -y unzip curl || true
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
              unzip -o /tmp/awscliv2.zip -d /tmp
              sudo /tmp/aws/install -i /usr/local/aws-cli -b /usr/local/bin || {
                echo "AWS CLI install failed"; exit 1
              }
              rm -rf /tmp/aws /tmp/awscliv2.zip
            else
              echo "▶ aws CLI already installed: $(aws --version 2>&1 | cut -d' ' -f1-2)"
            fi

            # Check that AWS credentials are available on the instance (instance profile preferred)
            if ! aws sts get-caller-identity --output text >/dev/null 2>&1; then
              echo "⚠️ aws CLI cannot find credentials on the instance. Ensure the EC2 instance has an IAM role with ECR permissions."
            fi

            # Docker login to ECR
            REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            echo "▶ Logging into ECR registry: ${REGISTRY}"
            aws ecr get-login-password --region "${AWS_REGION}" \
              | sudo docker login --username AWS --password-stdin "${REGISTRY}"

            IMAGE_REF="${IMAGE_NAME}@${IMAGE_DIGEST}"
            echo "▶ Pull image: ${IMAGE_REF}"
            sudo docker pull "${IMAGE_REF}"

            sudo docker stop opsnow-healthcheck || true
            sudo docker rm opsnow-healthcheck || true

            if [ -n "${ENTRY_CMD:-}" ]; then
              CMD_TO_RUN="${ENTRY_CMD}"
            else
              CMD_TO_RUN=""
            fi

            echo "▶ Run new container (detached) with command: ${CMD_TO_RUN}"
            sudo docker run -d --name opsnow-healthcheck --restart unless-stopped \
              "${IMAGE_REF}" ${CMD_TO_RUN}

            echo "▶ Containers:"
            sudo docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'

      - name: Verify container health (logs tail + optional HTTP check)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -eux
            echo "🩺 Last 50 log lines:"
            sudo docker logs --tail 50 opsnow-healthcheck || true

            if command -v curl >/dev/null 2>&1; then
              echo "🔍 Health endpoint test (http://localhost:8000/health):"
              curl -f http://localhost:8000/health && echo "health OK" || echo "health endpoint failed or not present"
            fi
