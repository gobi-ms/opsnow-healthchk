name: Build ‚Üí Push ‚Üí Deploy (ECR ‚Üí EC2 via SSH)

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      entry_command:
        description: "Container command (override if needed)"
        required: false
        default: "python src/global_monitor.py"

concurrency:
  group: healthcheck-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 621120073833
  ECR_REPOSITORY: opsnow-healthcheck

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: opsnow-healthcheck
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      image_uri: ${{ steps.meta.outputs.image_uri }}
      image_digest: ${{ steps.push.outputs.image_digest }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::621120073833:role/Opsnow
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image metadata
        id: meta
        run: |
          set -eu
          IMAGE_TAG="${GITHUB_SHA}"
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "image_uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          echo "Using IMAGE_URI=$IMAGE_URI"

      - name: Build and push Docker image
        id: push
        run: |
          set -euo pipefail
          docker build -f cicd/docker/Dockerfile -t "${{ steps.meta.outputs.image_uri }}" .
          docker push "${{ steps.meta.outputs.image_uri }}"

          DIGEST=$(aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --image-ids imageTag="${{ steps.meta.outputs.image_tag }}" \
            --query 'imageDetails[0].imageDigest' --output text)
          if [ -z "$DIGEST" ] || [ "$DIGEST" = "None" ]; then
            echo "Failed to resolve image digest after push"; exit 1
          fi
          echo "image_digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Pushed image digest: $DIGEST"

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: opsnow-healthcheck
    permissions:
      contents: read
    env:
      IMAGE_URI: ${{ needs.build_and_push.outputs.image_uri }}
      IMAGE_DIGEST: ${{ needs.build_and_push.outputs.image_digest }}
      ENTRY_CMD: ${{ inputs.entry_command || 'python src/global_monitor.py' }}

    steps:
      - name: Assert required secrets exist
        run: |
          [ -n "${{ secrets.EC2_HOST }}" ] || { echo "‚ùå Missing EC2_HOST secret"; exit 1; }
          [ -n "${{ secrets.EC2_SSH_KEY }}" ] || { echo "‚ùå Missing EC2_SSH_KEY secret"; exit 1; }

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}   # e.g., 54.166.xx.xx
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: IMAGE_URI,IMAGE_DIGEST,ENTRY_CMD,AWS_REGION,AWS_ACCOUNT_ID
          script: |
            set -eu
            echo "üöÄ Starting deployment on EC2..."

            echo "‚ñ∂ Starting Docker"
            sudo systemctl start docker || true

            echo "‚ñ∂ Docker info"
            sudo docker info | sed -n '1,40p' || true

            echo "‚ñ∂ Login to ECR"
            aws ecr get-login-password --region us-east-1 \
              | sudo docker login --username AWS --password-stdin 621120073833.dkr.ecr.us-east-1.amazonaws.com

            echo "‚ñ∂ Pull image by digest"
            sudo docker pull "${IMAGE_URI}@${IMAGE_DIGEST}"

            echo "‚ñ∂ Stop & remove old container"
            sudo docker stop opsnow-healthcheck || true
            sudo docker rm opsnow-healthcheck || true

            echo "‚ñ∂ Run new container"
            sudo docker run -d --name opsnow-healthcheck --restart unless-stopped \
              "${IMAGE_URI}@${IMAGE_DIGEST}" ${ENTRY_CMD}

            echo "‚ñ∂ Containers:"
            sudo docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'

      - name: Verify container health (logs tail)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ü©∫ Last 50 log lines:"
            sudo docker logs --tail 50 opsnow-healthcheck || true
