name: Deploy to EC2 via SSM

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "ECR image tag to deploy"
        required: true
        default: "latest"
      entry_command:
        description: "Container command (override if needed)"
        required: false
        default: "python src/global_monitor.py"
      use_instance_ids:
        description: "Set to true to use EC2_INSTANCE_IDS var; else uses tag vars"
        required: false
        default: "true"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: opsnow-healthcheck
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 211125621923
      ECR_REPOSITORY: opsnow-healthcheck
      IMAGE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ inputs.image_tag }}
      ENTRY_CMD: ${{ inputs.entry_command }}

    steps:
      - name: Configure AWS (assume GitHub OIDC role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::211125621923:role/Opsnow
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      # Resolve the immutable digest for the chosen tag
      - name: Resolve image digest from ECR
        id: digest
        run: |
          set -e
          DIGEST=$(aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --image-ids imageTag="${IMAGE_TAG}" \
            --query 'imageDetails[0].imageDigest' --output text)
          if [ -z "$DIGEST" ] || [ "$DIGEST" = "None" ]; then
            echo "ECR image with tag '${IMAGE_TAG}' not found in ${ECR_REPOSITORY}"
            exit 1
          fi
          echo "IMAGE_DIGEST=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Resolved digest: $DIGEST"

      # Deploy via SSM to explicit instance IDs (preferred)
      - name: Deploy to EC2 by Instance IDs
        if: ${{ inputs.use_instance_ids == 'true' }}
        run: |
          set -e
          aws ssm send-command \
            --region "${AWS_REGION}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy ${IMAGE_URI}@${{ steps.digest.outputs.IMAGE_DIGEST }}" \
            --parameters commands='[
              "set -e",
              "aws ecr get-login-password --region '"${AWS_REGION}"' | docker login --username AWS --password-stdin '"${AWS_ACCOUNT_ID}"'.dkr.ecr.'"${AWS_REGION}"'.amazonaws.com",
              "docker pull '"${IMAGE_URI}"'@'${{ steps.digest.outputs.IMAGE_DIGEST }}'",
              "docker stop opsnow-healthcheck || true",
              "docker rm opsnow-healthcheck || true",
              "docker run -d --name opsnow-healthcheck --restart unless-stopped '"${IMAGE_URI}"'@'${{ steps.digest.outputs.IMAGE_DIGEST }}' '"${ENTRY_CMD}"'"
            ]' \
            --instance-ids $(echo "${{ vars.EC2_INSTANCE_IDS }}" | tr -d ' ') \
            --output text

      # Or deploy to all running instances with a specific tag (set EC2_TAG_KEY / EC2_TAG_VALUE repo vars)
      - name: Deploy to EC2 by Tag
        if: ${{ inputs.use_instance_ids != 'true' }}
        run: |
          set -e
          IDS=$(aws ec2 describe-instances \
            --region "${AWS_REGION}" \
            --filters "Name=tag:${{ vars.EC2_TAG_KEY }},Values=${{ vars.EC2_TAG_VALUE }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$IDS" ]; then
            echo "No running instances found with tag ${{ vars.EC2_TAG_KEY }}=${{ vars.EC2_TAG_VALUE }}"
            exit 1
          fi
          aws ssm send-command \
            --region "${AWS_REGION}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy ${IMAGE_URI}@${{ steps.digest.outputs.IMAGE_DIGEST }}" \
            --parameters commands='[
              "set -e",
              "aws ecr get-login-password --region '"${AWS_REGION}"' | docker login --username AWS --password-stdin '"${AWS_ACCOUNT_ID}"'.dkr.ecr.'"${AWS_REGION}"'.amazonaws.com",
              "docker pull '"${IMAGE_URI}"'@'${{ steps.digest.outputs.IMAGE_DIGEST }}'",
              "docker stop opsnow-healthcheck || true",
              "docker rm opsnow-healthcheck || true",
              "docker run -d --name opsnow-healthcheck --restart unless-stopped '"${IMAGE_URI}"'@'${{ steps.digest.outputs.IMAGE_DIGEST }}' '"${ENTRY_CMD}"'"
            ]' \
            --instance-ids $IDS \
            --output text
