name: Build → Push → Deploy (ECR → EC2 via SSM)

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      entry_command:
        description: "Container command (override if needed)"
        required: false
        default: "python src/global_monitor.py"
      use_instance_ids:
        description: "Set to true to use EC2_INSTANCE_IDS var; else uses tag vars"
        required: false
        default: "true"

concurrency:
  group: healthcheck-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 621120073833
  ECR_REPOSITORY: opsnow-healthcheck
  ENTRY_CMD: ${{ inputs.entry_command }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: opsnow-healthcheck
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      image_uri: ${{ steps.meta.outputs.image_uri }}
      image_digest: ${{ steps.push.outputs.image_digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::621120073833:role/Opsnow
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image metadata
        id: meta
        run: |
          set -euo pipefail
          IMAGE_TAG="${GITHUB_SHA}"               # immutable per commit (or use 'latest')
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "image_tag=$IMAGE_TAG"   >> "$GITHUB_OUTPUT"
          echo "image_uri=$IMAGE_URI"   >> "$GITHUB_OUTPUT"
          echo "Using IMAGE_URI=$IMAGE_URI"

      - name: Build and push
        id: push
        run: |
          set -euo pipefail
          docker build \
          -f cicd/docker/Dockerfile \
          -t "${{ steps.meta.outputs.image_uri }}" \
          .
          docker push "${{ steps.meta.outputs.image_uri }}"
          # Resolve digest after push
          DIGEST=$(aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --image-ids imageTag="${{ steps.meta.outputs.image_tag }}" \
            --query 'imageDetails[0].imageDigest' --output text)
          if [ -z "$DIGEST" ] || [ "$DIGEST" = "None" ]; then
            echo "Failed to resolve image digest after push"; exit 1
          fi
          echo "image_digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Pushed and resolved digest: $DIGEST"

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: opsnow-healthcheck
    permissions:
      id-token: write
      contents: read
    env:
      IMAGE_URI: ${{ needs.build_and_push.outputs.image_uri }}
      IMAGE_DIGEST: ${{ needs.build_and_push.outputs.image_digest }}
      ENTRY_CMD: ${{ inputs.entry_command || 'python src/global_monitor.py' }}
    steps:
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::211125621923:role/Opsnow
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Deploy to EC2 by Instance IDs
        run: |
          set -euo pipefail

          # Expect repo variable EC2_INSTANCE_IDS like:
          # "i-0123abc,i-0456def" or "i-0123abc i-0456def"
          RAW="${{ vars.EC2_INSTANCE_IDS }}"
          IDS=$(echo "$RAW" | tr ',\n' '  ' | xargs)
          if [ -z "$IDS" ]; then
            echo "EC2_INSTANCE_IDS repo var is empty (set in Settings → Actions → Variables)"; exit 1
          fi

          SHORT_DIGEST="${IMAGE_DIGEST:7:12}"
          COMMENT="Deploy opsnow-healthcheck:${IMAGE_URI##*:} (${SHORT_DIGEST})"  # < 100 chars

          aws ssm send-command \
            --region "${AWS_REGION}" \
            --document-name "AWS-RunShellScript" \
            --comment "$COMMENT" \
            --parameters commands='[
              "set -euo pipefail",
              "aws ecr get-login-password --region '"${AWS_REGION}"' | docker login --username AWS --password-stdin '"${AWS_ACCOUNT_ID}"'.dkr.ecr.'"${AWS_REGION}"'.amazonaws.com",
              "docker pull '"${IMAGE_URI}"'@'"${IMAGE_DIGEST}"'",
              "docker stop opsnow-healthcheck || true",
              "docker rm opsnow-healthcheck || true",
              "docker run -d --name opsnow-healthcheck --restart unless-stopped '"${IMAGE_URI}"'@'"${IMAGE_DIGEST}"'"
            ]' \
            --instance-ids $IDS \
            --output text
